# find out if git repository is available
ifeq ($(shell [ -e $(XSH_HOME)/.git ] && echo true || echo 'Warning: git information unavailable; versioning information limited' >&2), true)
IS_GIT = 1
else
IS_GIT = 0
endif

XSH_FVER = $(shell cat $(XSH_HOME)/version)
XSH_COMMIT =
XSH_VER = 
ifeq ($(IS_GIT), 1)
XSH_COMMIT = $(shell git rev-parse --short=5 HEAD)
XSH_VER = $(XSH_FVER).$(XSH_COMMIT)
else
XSH_VER = $(XSH_FVER)
endif

ifneq ($(shell which julia 2>/dev/null),)
JULIA=$(shell which julia 2>/dev/null)
USE_SYSTEM_JULIA = 1
else
JULIA = 
USE_SYSTEM_JULIA = 0
endif

# Directories where said libraries get installed to
prefix ?= $(abspath xsh-$(XSH_VER))
bindir = $(prefix)/bin
libdir = $(prefix)/lib
private_libdir = $(libdir)/xsh
includedir = $(prefix)/include
sysconfdir = $(prefix)/etc
datarootdir = $(prefix)/share
docdir = $(datarootdir)/doc/xsh
mandir = $(datarootdir)/man
man1dir = $(mandir)/man1

# Directories where things get built into
build_prefix = $(XSH_HOME)/build
build_bindir = $(build_prefix)/bin
build_libdir = $(build_prefix)/lib
build_shlibdir = $(build_libdir)
build_private_libdir = $(build_prefix)/lib/xsh
build_includedir = $(build_prefix)/include
build_sysconfdir = $(build_prefix)/etc
build_datarootdir = $(build_prefix)/share
build_docdir = $(build_datarootdir)/doc/xsh
build_mandir = $(build_datarootdir)/man
build_man1dir = $(build_mandir)/man1

# XSH Definitions
XSH_CPU_TARGET ?= native
XSH_EXECUTABLE_DEBUG = $(build_bindir)/xsh-debug
XSH_EXECUTABLE_RELEASE = $(build_bindir)/xsh
XSH_EXECUTABLE = $(XSH_EXECUTABLE)
XSH_LIBRARY=$(build_private_libdir)/libxsh.dylib
XSH_SYSTEM_IMAGE=$(build_private_libdir)/xsh-sys.ji

# Julia Definitions
# JULIA_BIN=$(build_bindir)/julia
# JULIA_INCLUDE=$(build_includedir)/julia
# JULIA_LIB=$(build_libdir)/julia
# JULIA_SYSTEM_IMAGE=$(JULIA_LIB)/sys.ji
# JULIA_SHARE=$(build_datarootdir)/julia
# JULIA_BASE=$(JULIA_SHARE)/base
# JULIA_BUILD_EXECUTABLE=$(JULIA_SHARE)/build_executable.jl
# JULIA_BUILD_SYSIMG=$(JULIA_SHARE)/build_sysimg.jl
# JULIA_CPU_TARGET ?= native
# JULIA_PKGDIR=$(JULIA_SHARE)/site

# file extensions
ifeq ($(OS), WINNT)
	SHLIB_EXT = dll
	SHELL_EXT = bat
else ifeq ($(OS), Darwin)
	SHLIB_EXT = dylib
	SHELL_EXT = sh
else
	SHLIB_EXT = so
	SHELL_EXT = sh
endif

define dir_target
$$(subst $$(abspath $(XSH_HOME))/,,$$(abspath $(1))): $$(abspath $(1))
$$(abspath $(1)):
	@mkdir -p $$@
endef

define rm_dir
$$(subst $$(abspath $(XSH_HOME))/,,$$(abspath $(1))): $$(abspath $(1))
$$(abspath $(1)):
	@rm -rfv $$@
endef

define symlink_target
CLEAN_TARGETS += clean-$(2)/$(1)
clean-$$(abspath $(2)/$(1)):
@-rm $$(abspath $(2)/$(1))
$$(subst $$(abspath $(XSH_HOME))/,,$$(abspath $(2)/$(1))): $$(abspath $(2)/$(1))
$$(abspath $(2)/$(1)): | $$(abspath $(2))
@ln -sf $$(abspath $(1)) $$@
endef

ifeq ($(BUILD_OS), WINNT) # MSYS
spawn = $(1)
cygpath_w = $(1)
else ifneq (,$(findstring CYGWIN,$(BUILD_OS))) # Cygwin
spawn = $(1)
cygpath_w = `cygpath -w $(1)`
else
ifeq ($(OS), WINNT) # unix-to-Windows cross-compile
spawn = wine $(1)
cygpath_w = `winepath -w $(1)`
else # not Windows
spawn = $(1)
cygpath_w = $(1)
endif
endif

exec = $(shell $(call spawn,$(1)))

pathsearch = $(firstword $(wildcard $(addsuffix /$(1),$(subst :, ,$(2)))))

# Colors for make
ifndef VERBOSE
VERBOSE = 0
endif

ifeq ($(VERBOSE), 0)

QUIET_MAKE = -s

CCCOLOR="\033[34m"
LINKCOLOR="\033[34;1m"
XSHCOLOR="\033[32;1m"

SRCCOLOR="\033[33m"
BINCOLOR="\033[37;1m"
JULCOLOR="\033[34;1m"
ENDCOLOR="\033[0m"

GOAL=$(subst ','\'',$(subst $(abspath $(XSH_HOME))/,,$(abspath $@)))

PRINT_CC = printf '    %b %b\n' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$(GOAL)$(ENDCOLOR); $(1)
PRINT_LINK = printf '    %b %b\n' $(LINKCOLOR)LINK$(ENDCOLOR) $(BINCOLOR)$(GOAL)$(ENDCOLOR); $(1)
PRINT_XSHELL = printf '    %b %b\n' $(XSHELLCOLOR)XSHELL$(ENDCOLOR) $(BINCOLOR)$(GOAL)$(ENDCOLOR); $(1)
else
QUIET_MAKE =
PRINT_CC = echo '$(subst ','\'',$(1))'; $(1)
PRINT_LINK = echo '$(subst ','\'',$(1))'; $(1)
PRINT_XSHELL = echo '$(subst ','\'',$(1))'; $(1)
endif

### util targets

define git-modules-init
ifneq ($(IS_GIT), 0)
	@-git submodule update --init
else
	$(warn "Submodules could not be updated because git is unavailable")
endif
endef

define git-modiles-update
ifneq ($(IS_GIT), 0)
	@-git submodule foreach git pull origin master
else
	$(warn "Submodules could not be updated because git is unavailable")
endif
endef

define get-dist-name
ifeq ($(XSH_DIST),)
	XSH_DIST_NAME = xshell-$(XSH_VER)-$(OS)-$(ARCH)
endif
endef

.PHONY: detect-git
